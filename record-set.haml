!!! 5

%link(rel="import" href="../polymer/polymer.html")

%polymer-element(name="record-set")
  %template
  :coffeescript
    data = {}
    dummy = {data: 0}
    fields = {}
    
    getFields = (record) -> 
      return fields[record.tagName] if fields[record.tagName]?

      p = HTMLElement.getPrototypeForTag record.tagName
      loop
        throw "not a record: " + record.tagName unless p.element.extends?
        break if p.element.extends == "record-base"
        p = HTMLElement.getPrototypeForTag p.element.extends
      k for own k,v of p.publish # rid is excluded
    
    Polymer
      _data: undefined
      _dummy: undefined
      computed:
        all: '_extractRecords(_data, _dummy.data)' # TODO dummy was added so changes within _data are observed
      created: () ->
        @_data = data
        @_dummy = dummy
      save: (record) ->
        @_data[record.type] = { records: {}, next: 1 } unless @_data[record.type]?
        r = @_data[record.type].records[record.rid]
        r = {} unless r?
        r.rid = @_data[record.type].next++ unless r.rid?
        @_data[record.type].records[r.rid] = r
        for k in getFields record
          r[k] = record[k]
        @_dummy.data++
      load: (record) ->
        if @_data[record.type]? and @_data[record.type].records[record.rid]?
          for k,v of @_data[record.type].records[record.rid]
            record[k]= v unless k == "rid"
      delete: (record) ->
        if @_data[record.type]? and @_data[record.type].records[record.rid]?
          delete @_data[record.type].records[record.rid]
          @_dummy.data++
      _extractRecords: (data) ->
        new ->
          @[type] = (record.rid for id,record of value.records) for type,value of data
          @

%polymer-element(name="record-base" attributes="rid persist type noautoload")
  %template
    %record-set(id="set")
  :coffeescript
    Polymer
      rid: undefined
      persist: undefined
      type: "record"
      noautoload: undefined
      observe: {
        'all': '_doAutoLoad' # TODO: overkill ! use fine grained events
      }
      computed:
        #type: '_lc(tagName)' # todo auto detection of type name
        all: '$.set.all[type]'
      ready: () ->
        @save() if @persist?
        @load() if @rid? and not @noautoload?
      save: () ->
        @$.set.save @ 
      load: () ->
        @$.set.load @
      delete: () ->
        @$.set.delete @
      _doAutoLoad: () ->
        @load() unless @noautoload?
      _lc: (s) -> s.toLowerCase()
      noautoloadChanged: () -> @_doAutoLoad()

